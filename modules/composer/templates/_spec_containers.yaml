{{- define "spec.containers" }}

{{- if .Values.nodeSelector }}
nodeSelector:
  {{- range $k, $v := .Values.nodeSelector }}
  {{ $k }}: {{ tpl $v $ }}
  {{- end }}
{{- end }}

{{- if .Values.security.sysctls }}
securityContext:
  sysctls:
  {{- range $k, $v := .Values.security.sysctls }}
  - name: {{ $k | quote }}
    value: {{ $v | quote }}
  {{- end }}
{{- end }}

hostname: {{ .Release.Name }}
hostNetwork: {{ .Values.hostNetwork }}
hostIPC: {{ .Values.hostIPC }}
dnsPolicy: {{ .Values.dnsPolicy | default "ClusterFirst" }}
dnsConfig:
  options:
  - name: ndots
    value: {{ .Values.ndots | default 1 | quote }}
  {{- if .Values.nameservers }}
  nameservers:
    {{- range .Values.nameservers }}
    - {{ . }}
    {{- end }}
  {{- end }}

{{- if .Values.serviceAccountName }}
serviceAccountName: {{ .Values.serviceAccountName }}
{{- end }}

containers:
- name: {{ .Release.Name }}
  {{- if .Values.registryPortOverrides.enabled }}
  image: {{ .Values.registryIP }}:{{ get .Values.registryPortOverrides .Values.image.registry }}/{{ .Values.image.name }}:{{ .Values.image.tag }}
  {{- else }}
  # image: {{ .Values.image.registry }}/{{ .Values.image.name }}:{{ .Values.image.tag }}
  image: {{ .Values.image.name }}:{{ .Values.image.tag }}
  {{- end }}
  imagePullPolicy: {{ .Values.image.pullPolicy }}
  {{- if .Values.command }}
  command:
  {{- range .Values.command }}
  - {{ tpl . $ | quote }}
  {{- end }}
  {{- end }}
  {{- if .Values.args }}
  args:
  {{- range .Values.args }}
  - {{ tpl . $ | quote }}
  {{- end }}
  {{- end }}
  securityContext:
    privileged: {{ or .Values.security.privileged .Values.gpu.enabled  }}
    {{- if .Values.security.capabilities }}
    capabilities:
      add:
      {{- range .Values.security.capabilities }}
      - {{ . }}
      {{- end }}
    {{- end }}
    {{- if .Values.security.seccomp }}
    seccompProfile:
      type: {{ .Values.security.seccomp }}
    {{- end }}
  {{- if .Values.probes.liveness.enabled }}
  livenessProbe:
    httpGet:
      path: {{ .Values.probes.liveness.path }}
      port: {{ .Values.probes.liveness.port }}
      {{- if .Values.probes.liveness.headers }}
      httpHeaders:
      {{- range .Values.probes.liveness.headers }}
      - name: {{ tpl .name $ }}
        value: {{ tpl .value $ }}
      {{- end }}
      {{- end }}
    initialDelaySeconds: {{ .Values.probes.liveness.delay }}
    periodSeconds: {{ .Values.probes.liveness.interval }}
    timeoutSeconds: {{ .Values.probes.liveness.timeout }}
    failureThreshold: {{ .Values.probes.liveness.threshold }}
  {{- end }}
  {{- if and .Values.probes.startup.enabled }}
  startupProbe:
    httpGet:
      path: {{ .Values.probes.startup.path }}
      port: {{ .Values.probes.startup.port }}
      {{- if .Values.probes.startup.headers }}
      httpHeaders:
      {{- range .Values.probes.startup.headers }}
      - name: {{ tpl .name $ }}
        value: {{ tpl .value $ }}
      {{- end }}
      {{- end }}
    initialDelaySeconds: {{ .Values.probes.startup.delay }}
    periodSeconds: {{ .Values.probes.startup.interval }}
    timeoutSeconds: {{ .Values.probes.startup.timeout }}
    failureThreshold: {{ .Values.probes.startup.threshold }}
  {{- end }}
  env:
  - name: NODENAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  {{- range $k, $v := .Values.fieldEnv }}
  - name: {{ $k }}
    valueFrom:
      fieldRef:
        fieldPath: {{ tpl (toString $v) $ | quote }}
  {{- end }}
  - name: TZ
    value: Europe/London
  - name: PUID
    value: {{ .Values.puid | default "1000" | quote }}
  - name: PGID
    value: {{ .Values.pgid | default "1000" | quote }}
  - name: UMASK
    value: "002"
  {{- range $k, $v := .Values.env }}
  - name: {{ $k }}
    value: {{ tpl (toString $v) $ | quote }}
  {{- end }}
  {{- range $k, $v := .Values.secretEnv }}
  - name: {{ $k }}
    valueFrom:
      secretKeyRef:
        name: {{ $.Release.Name }}-env-{{ include "secrets.rendered" $ | toYaml | sha1sum }}
        key: {{ $k }}
  {{- end }}
  {{- if .Values.ports }}
  ports:
  {{- range .Values.ports.ClusterIP }}
  - containerPort: {{ .port }}
    name: {{ .name | default "web" }}
    protocol: {{ .protocol | default "TCP" }}
  {{- end }}
  {{- range .Values.ports.LoadBalancer }}
  - containerPort: {{ .port }}
    name: {{ .name | default "web" }}
    protocol: {{ .protocol | default "TCP" }}
  {{- end }}
  {{- end }}
{{- include "volumeMounts" . }}

{{- if .Values.initContainers }}
initContainers:
{{- range .Values.initContainers }}
- name: {{ .name }}
  image: {{ .image }}
  command:
  {{- range .command }}
  - {{ . }}
  {{- end }}
{{- include "volumeMounts" $ }}
{{- end }}
{{- end }}

{{- if .Values.volumes }}
volumes:
{{- if .Values.gpu.enabled }}
- name: host-gpu
  hostPath:
    path: /dev/dri
    type: Directory
{{- end }}
{{- range $host := .Values.volumes.host }}
- name: host-{{ $host | toString | sha1sum }}
  hostPath:
    path: {{ $host.hostPath }}
    type: {{ $host.type }}
{{- end }}
{{- range .Values.volumes.config }}
- name: {{ $.Release.Name }}-{{ (tpl (printf "%s\n%s\n%s\n%s" $.Release.Name .path (.content | toYaml) .mode) $) | sha1sum }}
  configMap:
    name: {{ $.Release.Name }}-{{ (tpl (printf "%s\n%s\n%s\n%s" $.Release.Name .path (.content | toYaml) .mode) $) | sha1sum }}
    defaultMode: {{ .mode | default "0644" }}
{{- end }}
{{- if and .Values.gpu.enabled (contains "linuxserver/" .Values.image.name) }}
- name: {{ $.Release.Name }}-linuxserver-gpu
  configMap:
    name: {{ $.Release.Name }}-linuxserver-gpu
    defaultMode: 0644
{{- end }}
{{- range .Values.volumes.secret }}
- name: {{ $.Release.Name }}-{{ (tpl (printf "%s\n%s\n%s\n%s" $.Release.Name .path (.content | toYaml) .mode) $) | sha1sum }}
  secret:
    secretName: {{ $.Release.Name }}-vol-{{ (tpl (printf "%s\n%s\n%s\n%s" $.Release.Name .path (.content | toYaml) .mode) $) | sha1sum }}
    defaultMode: {{ .mode | default "0644" }}
{{- end }}
{{- if .Values.volumes.persisted }}
- name: persisted
  persistentVolumeClaim:
    claimName: persistence-{{ .Release.Namespace }}
{{- end }}
{{- range .Values.volumes.claims }}
- name: claim-{{ tpl .claim $ }}
  persistentVolumeClaim:
    claimName: {{ tpl .claim $ }}
{{- end }}
{{- end }}

{{- end }}

{{- define "volumeMounts" }}
  {{- if .Values.volumes }}
  volumeMounts:
  {{- range .Values.volumes.persisted }}
  - name: persisted
    mountPath: {{ . }}
    subPath: {{ $.Release.Name }}{{ . }}
  {{- end }}
  {{- range .Values.volumes.secret }}
  - name: {{ $.Release.Name }}-{{ (tpl (printf "%s\n%s\n%s\n%s" $.Release.Name .path (.content | toYaml) .mode) $) | sha1sum }}
    mountPath: {{ .path }}
    subPath: {{ base .path }}
  {{- end }}
  {{- if and .Values.gpu.enabled (contains "linuxserver/" .Values.image.name) }}
  - name: {{ $.Release.Name }}-linuxserver-gpu
    mountPath: /custom-cont-init.d/00_gpu-render-group
    subPath: 00_gpu-render-group
  {{- end }}
  {{- range .Values.volumes.config }}
  - name: {{ $.Release.Name }}-{{ (tpl (printf "%s\n%s\n%s\n%s" $.Release.Name .path (.content | toYaml) .mode) $) | sha1sum }}
    mountPath: {{ .path }}
    subPath: {{ base .path }}
  {{- end }}
  {{- range $claim := .Values.volumes.claims }}
  {{- range $subPath, $container := .mounts }}
  - name: claim-{{ tpl $claim.claim $ }}
    mountPath: {{ tpl $container $ }}
    {{- if ne $subPath "/" }}
    subPath: {{ tpl $subPath $ }}
    {{- end }}
  {{- end }}
  {{- end }}
  {{- if .Values.gpu.enabled }}
  - name: host-gpu
    mountPath: /dev/dri
  {{- end }}
  {{- range $host := .Values.volumes.host }}
  - name: host-{{ $host | toString | sha1sum }}
    mountPath: {{ $host.containerPath }}
  {{- end }}
{{- end }}
{{- end }}
